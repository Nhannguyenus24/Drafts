struct Node{
	int key;
	Node* left;
	Node* right;
};

Node* createNode(int data){
	return new Node{data, NULL, NULL};
}

void Insert(Node* &root, int x ){
	if(root == NULL){
		root = createNode(x);
		return;
	}
	if(x < root->key)
		Insert(root->left, x);
	if (x > root->key)	
		Insert(root->right, x);
}

Node* createTree(int a[], int n){
	Node* root = NULL;
	for (int i = 0; i < n; i++)
		Insert(root, a[i]);
		
	return root;	
}

int countNode(Node* root){
	if(root == NULL)
	return 0;
	
	return 1 + countNode(root->left) + countNode(root->right);
}

int Height(Node *root){
	if(root == NULL) return 0;
	return max(Height(root->left),Height(root->right)) + 1;
}

Node* Search(Node* root, int x){
	if (root == NULL || root->key == x)
		return root;
	if (root->key > x)
		return Search(root->left, x);
	return Search(root->right, x);
}

void removeTree(Node* &root){
	if (root == NULL)
	{
		return;
	}
	
	if (root -> left != NULL)
	{
		removeTree(root -> left);
	}
	if (root -> right != NULL)
	{
		removeTree(root -> right);
	}
	
	Node* temp = root;
	root = NULL;
	delete temp;
}

 int heightNode(Node* pRoot, int value) {
 	if(pRoot == NULL)
 		return -1;
 	if(pRoot->key == value)
 		return Height(pRoot);
 	if(value < pRoot->key)
 		return heightNode(pRoot->left, value);
 	else 
 		return heightNode(pRoot->right, value);
 }

int countLeaf(Node* pRoot){
	if(!pRoot) return 0;
	if(!pRoot->right && !pRoot->left) return 1;
	return countLeaf(pRoot->right) + countLeaf(pRoot->left);
}

void toArray(vector <int> &a, Node* pRoot){
	if (pRoot == NULL)
		return;
		
	toArray(a, pRoot->left);
	a.push_back(pRoot->key);
	toArray(a, pRoot->right);
}

bool isBST(Node* pRoot){
	vector <int> a;
	toArray(a, pRoot);
	for (int i = 1; i < (int)a.size(); ++i)
		if (a[i] < a[i-1])
			return false;
	return true;
}

bool isFull (Node* pRoot)
{
	if (pRoot == NULL)
		return true;
		
	else
	{
		if (pRoot->left == NULL && pRoot->right != NULL)
			return false;
		if (pRoot->left != NULL && pRoot->right == NULL)
			return false;
		return true && isFull(pRoot->left) && isFull (pRoot->right);
	}
}

bool isFullBST(Node* pRoot)
{
	return isBST(pRoot) && isFull(pRoot);
}

void Remove(Node* &pRoot, int x)
{
	if(pRoot == NULL)
		return;
	if(x < pRoot->key)
		Remove(pRoot->left, x);
	else if(x > pRoot->key)
		Remove(pRoot->right, x);
	else
	{
		if(pRoot->left == NULL && pRoot->right == NULL)
		{
			delete pRoot;
			pRoot = NULL;
		}
		else if(pRoot->left != NULL && pRoot->right != NULL)
		{
			Node *successor = pRoot->right;
			while(successor->left != NULL)
				successor = successor->left;
			swap(pRoot->key, successor->key);
			Remove(pRoot->right, x);
		}
		else
		{
			Node *child = pRoot->left;
			if(pRoot->right != NULL)
				child = pRoot->right;
			*pRoot = *child;
			delete child;
			child = NULL; 
		}
	}
}

int getLevelUtil(Node * root, int data, int level) {
 	if (root == NULL) return 0;
 	if (root->key == data) return level;
 	int downlevel = getLevelUtil(root->left, data, level + 1);
 	if (downlevel != 0) return downlevel;
 	downlevel = getLevelUtil(root->right, data, level + 1);
 	return downlevel;
 }
 int Level(Node *root, int key) {
 	return getLevelUtil(root, key, 1);
 }

void printLevel(Node* pRoot, int level){
    if (pRoot == NULL)
        return;
    if (level == 1)
        cout << pRoot->key << " ";
    else if (level > 1){
        printLevel(pRoot->left, level - 1);
        printLevel(pRoot->right, level - 1);
    }
}
void LevelOrder(Node* pRoot){
    int h = Height(pRoot);
    if (h == 0)
        cout << "NULL" << endl;
    for (int i = 1; i <= h; i++)
        printLevel(pRoot, i);
}

NODE* findMin(NODE* pRoot) {
    while (pRoot->left) {
        pRoot = pRoot->left;
    }
    return pRoot;
}

void remove(NODE*& pRoot, int x) {
    if (pRoot == NULL) {
        return;
    } else if (x < pRoot->key) {
        remove(pRoot->left, x);
    } else if (x > pRoot->key) {
        remove(pRoot->right, x);
    } else {
        if (!pRoot->left && !pRoot->right) {
            delete pRoot;
            pRoot = nullptr;
        } else if (!pRoot->left) {
            NODE* temp = pRoot;
            pRoot = pRoot->right;
            delete temp;
        } else if (!pRoot->right) {
            NODE* temp = pRoot;
            pRoot = pRoot->left;
            delete temp;
        } else {
            NODE* temp = findMin(pRoot->right);
            pRoot->key = temp->key;
            remove(pRoot->right, temp->key);
        }
    }
}

 void findLongestPathHelper(Node* node, std::vector<int>& currentPath, std::vector<int>& longestPath) {
    if (node == nullptr) {
        if (currentPath.size() > longestPath.size()) {
            longestPath = currentPath; 
        }
        return;
    }

    currentPath.push_back(node->key);
    findLongestPathHelper(node->left, currentPath, longestPath);
    findLongestPathHelper(node->right, currentPath, longestPath);
    currentPath.pop_back(); 
}
vector<int> findLongestPath(Node* root) {
    vector<int> currentPath;
    vector<int> longestPath;
    findLongestPathHelper(root, currentPath, longestPath);
    return longestPath;
}
